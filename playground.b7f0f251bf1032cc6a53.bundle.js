!function(e){function t(t){for(var n,i,l=t[0],u=t[1],c=t[2],d=0,f=[];d<l.length;d++)i=l[d],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&f.push(o[i][0]),o[i]=0;for(n in u)Object.prototype.hasOwnProperty.call(u,n)&&(e[n]=u[n]);for(s&&s(t);f.length;)f.shift()();return a.push.apply(a,c||[]),r()}function r(){for(var e,t=0;t<a.length;t++){for(var r=a[t],n=!0,l=1;l<r.length;l++){var u=r[l];0!==o[u]&&(n=!1)}n&&(a.splice(t--,1),e=i(i.s=r[0]))}return e}var n={},o={2:0},a=[];function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var l=window.webpackJsonp=window.webpackJsonp||[],u=l.push.bind(l);l.push=t,l=l.slice();for(var c=0;c<l.length;c++)t(l[c]);var s=u;a.push([298,0,1,3]),r()}({0:function(e,t){e.exports=React},107:function(e,t){e.exports=moment},112:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryListConsume=t.QueryListProvider=t.useQueryListContext=void 0;var u=r(5),c=i(r(0)),s={pageSize:10,startIndex:1,service:function(){return Promise.resolve({total:0,data:[]})},registryAddress:function(){},refresh:function(){return Promise.resolve({total:0,data:[]})},reset:function(){return Promise.resolve({total:0,data:[]})}},d=(0,c.createContext)(s);t.useQueryListContext=function(){return(0,c.useContext)(d)};t.QueryListProvider=function(e){var t=l((0,c.useState)({query:"query",list:"list"}),2),r=t[0],o=t[1],a=e.children,i=e.service,f=(0,u.useForm)(),p=(0,u.useField)(),m=(0,c.useMemo)((function(){return p.query(r.query).take()}),[r.query,p]),y=(0,c.useMemo)((function(){return p.query(r.list).take()}),[r.list,p]),v=(0,c.useRef)(f),b=(0,c.useRef)(p);(0,c.useEffect)((function(){v.current=f}),[f]),(0,c.useEffect)((function(){b.current=p}),[p]);var h=(0,c.useCallback)((function(){var e;if(i){var t=v.current.query(r.list).get("data"),o=v.current.query(r.query).value();return null===(e=v.current.query(r.list).take())||void 0===e||e.setState((function(e){e.componentProps=e.componentProps||{},e.componentProps.loading=!0})),null==i?void 0:i(n(n({},t),o)).then((function(e){var t;return null===(t=v.current.query(r.list).take())||void 0===t||t.setState((function(t){t.componentProps=t.componentProps||{},t.componentProps.loading=!1,t.value=e.data,t.data.total=e.total})),e})).catch((function(e){var t;throw null===(t=v.current.query(r.list).take())||void 0===t||t.setState((function(e){e.componentProps=e.componentProps||{},e.componentProps.loading=!1})),e}))}}),[r,i]),g=(0,c.useCallback)((function(){return v.current.query(r.list).take().setState((function(e){e.data.current=1,e.data.pageSize=10,e.data.selectedRows=[],e.data.selectedRowKeys=[]})),h()}),[r.list,h]),_=(0,c.useCallback)((function(e,t){o((function(r){var o;return r[e]===t?r:n(n({},r),((o={})[e]=t,o))}))}),[]);return c.default.createElement(d.Provider,{value:n(n({},s),{autoload:e.autoload,form:f,query:m,list:y,refresh:h,reset:g,registryAddress:_})},a)},t.QueryListConsume=d.Consumer},115:function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,a=t.length;o<a;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.getLocales=t.getListNode=t.getActionsNode=t.getIndexNode=t.getColumnNode=t.getToolbarNode=t.getQueryNode=t.actions=void 0;t.actions=function(e){return(e?[e]:["Popover","Popconfirm","Modal","Drawer"]).map((function(e){return{componentName:"Field",props:{type:"object",title:e,"x-component":"QueryTable.Action.".concat(e)},children:[{componentName:"Field",props:{type:"string",title:"输入框","x-component":"Input","x-component-props":{title:"输入"}}}]}}))};t.getQueryNode=function(){return{componentName:"Field",props:{type:"object","x-component":"QueryForm","x-component-props":{grid:{maxRows:2,maxColumns:3}}},children:[]}};t.getToolbarNode=function(){return{componentName:"Field",props:{type:"void","x-component":"QueryTable.Toolbar"},children:(0,t.actions)()}};t.getColumnNode=function(){return{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{title:"Title"}}}};t.getIndexNode=function(){return{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{title:"序号"}},children:[{componentName:"Field",props:{type:"void","x-component":"QueryTable.Index"}}]}};t.getActionsNode=function(){return{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{title:"操作"}},children:(0,t.actions)()}};t.getListNode=function(e){return{componentName:"Field",props:{type:"array","x-component":"QueryTable"},children:[{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{title:"Title"}},children:o([],n(e.map((function(e){return e.props.title=void 0,e}))),!1)}]}};t.getLocales=function(e){return{"zh-CN":{title:e},"en-US":{title:e},"ko-KR":{title:e}}}},141:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useAction=void 0;var n=r(15),o=r(5),a=r(1),i=r(0),l=r(112);t.useAction=function(){var e,t,r,u=(0,o.useField)(),c=(0,o.useFieldSchema)(),s=null===(e=null===n.ArrayBase||void 0===n.ArrayBase?void 0:n.ArrayBase.useIndex)||void 0===e?void 0:e.call(n.ArrayBase),d=null===(t=null===n.ArrayBase||void 0===n.ArrayBase?void 0:n.ArrayBase.useRecord)||void 0===t?void 0:t.call(n.ArrayBase),f=null===(r=null===n.ArrayBase||void 0===n.ArrayBase?void 0:n.ArrayBase.useArray)||void 0===r?void 0:r.call(n.ArrayBase),p=(0,l.useQueryListContext)(),m=p.refresh,y=p.list;return(0,i.useMemo)((function(){return{actions:{load:function(){var e,t;return((null===(t=null===(e=u.componentProps)||void 0===e?void 0:e.actions)||void 0===t?void 0:t.load)||function(){return Promise.resolve(d)})(d).then((function(e){return console.log("loader data",e),null!=e?u.setValue((0,a.toJS)(e)):e}))},cancel:function(){var e,t,r=(null===(t=null===(e=u.componentProps)||void 0===e?void 0:e.actions)||void 0===t?void 0:t.cancel)||function(){return Promise.resolve()};return new Promise((function(e){setTimeout((function(){e("")}),0)})).then((function(){u.reset().then((function(){return r(d)}))}))},submit:function(){var e,t,r=(null===(t=null===(e=u.componentProps)||void 0===e?void 0:e.actions)||void 0===t?void 0:t.submit)||function(e){return Promise.resolve(e)};return u.submit().then((function(e){return r(e,d).then((function(e){if(e){var t=(null==f?void 0:f.field)||y;t&&(void 0!==s?t.value[s]=e:t.value.unshift(e))}else null==m||m();return u.reset(),e}))}))}},field:u,schema:c,index:s,record:d,array:f}}),[f,u,s,y,d,m,c])}},142:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePopAction=void 0;var i=r(15),l=r(5),u=r(7),c=r(0),s=a(r(0));t.usePopAction=function(e,t){var r,a=e,d=a.actions,f=a.okText,p=a.cancelText,m=a.schema,y=a.layout,v=a.grid,b=o((0,c.useState)(!1),2),h=b[0],g=b[1],_=o((0,c.useState)(!1),2),O=_[0],P=_[1],S=null===(r=i.ArrayBase.useArray)||void 0===r?void 0:r.call(i.ArrayBase),x=(0,c.useMemo)((function(){return S?{size:"small",type:"link"}:{}}),[S]),C=(0,c.useCallback)((function(){P(!0),d.load().then((function(){g(!0)})).finally((function(){P(!1)}))}),[d]),E=(0,c.useCallback)((function(){P(!0),d.submit().then((function(e){return g(!1),e})).finally((function(){P(!1)}))}),[d]),T=(0,c.useCallback)((function(){P(!0),d.cancel().then((function(){g(!1)})).finally((function(){P(!1)}))}),[d]);return{form:(0,c.useMemo)((function(){return m?s.default.createElement(s.default.Fragment,null,s.default.createElement(i.FormLayout,n({},y),s.default.createElement(i.FormGrid,n({},v),s.default.createElement(l.RecursionField,{schema:m})))):null}),[v,y,m]),footer:(0,c.useMemo)((function(){return s.default.createElement(u.Space,{style:{display:"flex",justifyContent:"flex-end",marginBottom:"16px"}},s.default.createElement(u.Button,{loading:O,size:t||x.size,onClick:T},p||"取消"),s.default.createElement(u.Button,{loading:O,size:t||x.size,onClick:E,type:"primary"},f||"确定"))}),[x.size,t,p,O,f,T,E]),visible:h,setVisible:g,loading:O,setLoading:P,load:C,submit:E,reset:T,btnProps:x}}},229:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(420),t)},298:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),r(299);var l=a(r(0)),u=i(r(34)),c=r(11),s=r(49),d=r(6),f=r(411),p=r(229),m=r(98),y=r(638);console.log({QueryForm:y.QueryForm,QueryTable:y.QueryTable,QueryList:y.QueryList}),(0,s.setNpmCDNRegistry)("//unpkg.com"),d.GlobalRegistry.registerDesignerLocales({"zh-CN":{sources:{Inputs:"输入控件",Layouts:"布局组件",Arrays:"自增组件",Displays:"展示组件"}},"en-US":{sources:{Inputs:"Inputs",Layouts:"Layouts",Arrays:"Arrays",Displays:"Displays"}},"ko-KR":{sources:{Inputs:"입력",Layouts:"레이아웃",Arrays:"배열",Displays:"디스플레이"}}});u.default.render(l.default.createElement((function(){var e=(0,l.useMemo)((function(){return(0,d.createDesigner)({shortcuts:[new d.Shortcut({codes:[[d.KeyCode.Meta,d.KeyCode.S],[d.KeyCode.Control,d.KeyCode.S]],handler:function(e){(0,p.saveSchema)(e.engine)}})],rootComponentName:"Form"})}),[]);return l.default.createElement(c.Designer,{engine:e},l.default.createElement(c.StudioPanel,{logo:l.default.createElement(f.LogoWidget,null),actions:l.default.createElement(f.ActionsWidget,null)},l.default.createElement(c.CompositePanel,null,l.default.createElement(c.CompositePanel.Item,{title:"panels.Component",icon:"Component"},l.default.createElement(c.ResourceWidget,{title:"sources.Inputs",sources:[y.QueryList,y.QueryForm,y.QueryTable,y.QueryTable.Action.Drawer,y.QueryTable.Toolbar]}),l.default.createElement(c.ResourceWidget,{title:"sources.Inputs",sources:[m.Input,m.Password,m.NumberPicker,m.Rate,m.Slider,m.Select,m.TreeSelect,m.Cascader,m.Transfer,m.Checkbox,m.Radio,m.DatePicker,m.TimePicker,m.Upload,m.Switch,m.ObjectContainer]}),l.default.createElement(c.ResourceWidget,{title:"sources.Layouts",sources:[m.Card,m.FormGrid,m.FormTab,m.FormLayout,m.FormCollapse,m.Space]}),l.default.createElement(c.ResourceWidget,{title:"sources.Arrays",sources:[m.ArrayCards,m.ArrayTable]}),l.default.createElement(c.ResourceWidget,{title:"sources.Displays",sources:[m.Text]})),l.default.createElement(c.CompositePanel.Item,{title:"panels.OutlinedTree",icon:"Outline"},l.default.createElement(c.OutlineTreeWidget,null)),l.default.createElement(c.CompositePanel.Item,{title:"panels.History",icon:"History"},l.default.createElement(c.HistoryWidget,null))),l.default.createElement(c.Workspace,{id:"form"},l.default.createElement(c.WorkspacePanel,null,l.default.createElement(c.ToolbarPanel,null,l.default.createElement(c.DesignerToolsWidget,null),l.default.createElement(c.ViewToolsWidget,{use:["DESIGNABLE","JSONTREE","MARKUP","PREVIEW"]})),l.default.createElement(c.ViewportPanel,{style:{height:"100%"}},l.default.createElement(c.ViewPanel,{type:"DESIGNABLE"},(function(){return l.default.createElement(c.ComponentTreeWidget,{components:{QueryList:y.QueryList,"QueryTable.Toolbar":y.QueryTable.Toolbar,QueryTable:y.QueryTable,QueryForm:y.QueryForm,Form:m.Form,Field:m.Field,Input:m.Input,Select:m.Select,TreeSelect:m.TreeSelect,Cascader:m.Cascader,Radio:m.Radio,Checkbox:m.Checkbox,Slider:m.Slider,Rate:m.Rate,NumberPicker:m.NumberPicker,Transfer:m.Transfer,Password:m.Password,DatePicker:m.DatePicker,TimePicker:m.TimePicker,Upload:m.Upload,Switch:m.Switch,Text:m.Text,Card:m.Card,ArrayCards:m.ArrayCards,ArrayTable:m.ArrayTable,Space:m.Space,FormTab:m.FormTab,FormCollapse:m.FormCollapse,FormGrid:m.FormGrid,FormLayout:m.FormLayout,ObjectContainer:m.ObjectContainer}})})),l.default.createElement(c.ViewPanel,{type:"JSONTREE",scrollable:!1},(function(e,t){return l.default.createElement(f.SchemaEditorWidget,{tree:e,onChange:t})})),l.default.createElement(c.ViewPanel,{type:"MARKUP",scrollable:!1},(function(e){return l.default.createElement(f.MarkupSchemaWidget,{tree:e})})),l.default.createElement(c.ViewPanel,{type:"PREVIEW"},(function(e){return l.default.createElement(f.PreviewWidget,{tree:e})}))))),l.default.createElement(c.SettingsPanel,{title:"panels.PropertySettings"},l.default.createElement(s.SettingsForm,{uploadAction:"https://www.mocky.io/v2/5cc8019d300000980a055e76"}))))}),null),document.getElementById("root"))},34:function(e,t){e.exports=ReactDOM},411:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(412),t),o(r(413),t),o(r(421),t),o(r(636),t),o(r(637),t)},412:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LogoWidget=void 0;var o=n(r(0)),a=r(11),i={dark:"//img.alicdn.com/imgextra/i2/O1CN01NTUDi81fHLQvZCPnc_!!6000000003981-55-tps-1141-150.svg",light:"//img.alicdn.com/imgextra/i2/O1CN01Kq3OHU1fph6LGqjIz_!!6000000004056-55-tps-1141-150.svg"};t.LogoWidget=function(){var e=i[(0,a.useTheme)()];return o.default.createElement("div",{style:{display:"flex",alignItems:"center",fontSize:14}},o.default.createElement("img",{alt:"",src:e,style:{margin:"12px 8px",height:18,width:"auto"}}))}},413:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ActionsWidget=void 0;var l=a(r(0)),u=r(7),c=i(r(414)),s=r(11),d=r(6),f=r(5),p=r(229);t.ActionsWidget=(0,f.observer)((function(){var e=(0,s.useDesigner)();(0,l.useEffect)((function(){(0,p.loadInitialSchema)(e)}),[]);var t=["zh-cn","en-us","ko-kr"];return(0,l.useEffect)((function(){t.includes(d.GlobalRegistry.getDesignerLanguage())||d.GlobalRegistry.setDesignerLanguage("zh-cn")}),[]),l.default.createElement(u.Space,{style:{marginRight:10}},l.default.createElement(u.Radio.Group,{value:d.GlobalRegistry.getDesignerLanguage(),optionType:"button",options:[{label:"简体中文",value:"zh-cn"}],onChange:function(e){d.GlobalRegistry.setDesignerLanguage(e.target.value)}}),l.default.createElement(u.Button,{type:"primary",href:"https://github.com/charlzyx/da",target:"_blank"},l.default.createElement(c.default,null),"Github"),l.default.createElement(u.Button,{href:"https://github.com/alibaba/designable",target:"_blank"},l.default.createElement(c.default,null),"Designable"))}))},420:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadInitialSchema=t.saveSchema=void 0;var n=r(177),o=r(7);t.saveSchema=function(e){localStorage.setItem("formily-schema",JSON.stringify((0,n.transformToSchema)(e.getCurrentTree()))),o.message.success("Save Success")};t.loadInitialSchema=function(e){try{e.setCurrentTree((0,n.transformToTreeNode)(JSON.parse(localStorage.getItem("formily-schema"))))}catch(e){}}},421:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};Object.defineProperty(t,"__esModule",{value:!0}),t.PreviewWidget=void 0;var u=i(r(0)),c=r(24),s=r(5),d=r(15),f=r(422),p=r(7),m=r(177),y=(0,s.createSchemaField)({components:{QueryTable:f.QueryTable,QueryList:f.QueryList,QueryForm:f.QueryForm,Space:d.Space,FormGrid:d.FormGrid,FormLayout:d.FormLayout,FormTab:d.FormTab,FormCollapse:d.FormCollapse,ArrayTable:d.ArrayTable,ArrayCards:d.ArrayCards,FormItem:d.FormItem,DatePicker:d.DatePicker,Checkbox:d.Checkbox,Cascader:d.Cascader,Editable:d.Editable,Input:d.Input,Text:function(e){var t=e.value,r=e.mode,n=e.content,o=l(e,["value","mode","content"]),a="normal"!==r&&r?r:"div";return u.default.createElement(a,o,t||n)},NumberPicker:d.NumberPicker,Switch:d.Switch,Password:d.Password,PreviewText:d.PreviewText,Radio:d.Radio,Reset:d.Reset,Select:d.Select,Submit:d.Submit,TimePicker:d.TimePicker,Transfer:d.Transfer,TreeSelect:d.TreeSelect,Upload:d.Upload,Card:p.Card,Slider:p.Slider,Rate:p.Rate}});t.PreviewWidget=function(e){var t=(0,u.useMemo)((function(){return(0,c.createForm)()}),[]),r=(0,m.transformToSchema)(e.tree),o=r.form,a=r.schema;return u.default.createElement(d.Form,n({},o,{form:t}),u.default.createElement(y,{schema:a}))}},422:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryTable=t.QueryForm=t.QueryList=void 0;var a=o(r(0)),i=r(112);t.QueryList=function(e){var t=e.children;return a.default.createElement(a.default.Fragment,null,a.default.createElement(i.QueryListProvider,n({},e),t))};var l=r(423);Object.defineProperty(t,"QueryForm",{enumerable:!0,get:function(){return l.QueryForm}});var u=r(424);Object.defineProperty(t,"QueryTable",{enumerable:!0,get:function(){return u.QueryTable}})},423:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryForm=t.useCollapseGrid=void 0;var l=r(15),u=r(5),c=r(7),s=i(r(0)),d=r(112),f={breakpoints:[680],layout:["vertical","horizontal"],labelAlign:["left","right"],labelCol:[24,6],wrapperCol:[24,10]};t.useCollapseGrid=function(e){void 0===e&&(e={});var t=e.maxRows||2,r=(0,s.useMemo)((function(){return l.FormGrid.createFormGrid({maxColumns:e.maxColumns||4,maxWidth:e.maxWidth||320,maxRows:t,shouldVisible:function(e,n){return e.index===r.childSize-1||(n.maxRows===1/0||e.shadowRow<t+1)}})}),[e.maxColumns,e.maxWidth,t]),n=(r.fullnessLastColumn?r.shadowRows-1:r.shadowRows)<=t?void 0:r.maxRows===1/0;return{grid:r,expanded:n,toggle:function(){r.maxRows===1/0?r.maxRows=t:r.maxRows=1/0}}},t.QueryForm=(0,u.observer)((function(e){var r=e.resetText,o=e.submitText,a=(0,u.useField)(),i=(0,u.useForm)(),p=(0,t.useCollapseGrid)(e.grid),m=p.grid,y=p.expanded,v=p.toggle,b=(0,d.useQueryListContext)(),h=b.reset,g=b.refresh,_=b.query,O=b.list,P=b.registryAddress,S=b.autoload;console.log("query form props",e);var x=function(){h(),i.reset(a.address,{forceClear:!0,validate:!1})},C=function(){return g()},E=(0,s.useRef)(!1);(0,s.useEffect)((function(){null==P||P("query",a.address.toString())}),[a.address]),(0,s.useEffect)((function(){!1===E.current&&!1!==S&&O&&_&&(g(),E.current=!0)}),[S,O,_,g]);return console.log("QueryForm Render Children",e.children),e.children?s.default.createElement(l.FormLayout,n({breakpoints:f.breakpoints,layout:f.layout,labelAlign:f.labelAlign,labelCol:f.labelCol},e.layout),s.default.createElement(l.FormGrid,n({},m,{grid:m}),e.children,s.default.createElement(l.FormGrid.GridColumn,{gridSpan:-1,style:{display:"flex",justifyContent:"space-between"}},s.default.createElement(l.FormButtonGroup,{align:"right",style:{width:"100%",marginBottom:"22px",display:"flex",justifyContent:"flex-end"}},void 0!==y?s.default.createElement(c.Button,{type:"link",onClick:function(e){e.preventDefault(),v()}},y?"收起":"展开"):null,s.default.createElement(c.Button,{onClick:x},r||"重置"),s.default.createElement(c.Button,{onClick:C,type:"primary"},o||"查询"))))):null}))},424:function(e,t,r){"use strict";var n,o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t},u=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryTable=void 0;var s=r(15),d=r(230),f=r(5),p=r(7),m=c(r(433)),y=l(r(0)),v=r(112),b=r(623),h=r(628),g=r(635),_=r(97),O=s.ArrayBase;t.QueryTable=(0,f.observer)((function(e){var t,r,n=(0,y.useRef)(null),a=(0,f.useField)(),i=(0,d.usePrefixCls)("formily-array-table"),l=a.value,c=(0,h.useTableSources)(),s=(0,h.useTableColumns)(a,c),b=(0,v.useQueryListContext)().registryAddress,P=(0,h.useSortable)(n),S=(0,h.useAddition)(),x=u((0,h.useSelection)(e.rowKey,e.rowSelection),2),C=x[0],E=x[1],T=(0,h.useTableExpandable)(e.expandable);return(0,y.useEffect)((function(){b("list",a.address.toString())}),[a.address]),y.default.createElement("div",{ref:n,className:i},e.selectable&&(null===(t=E.selectedRowKeys)||void 0===t?void 0:t.length)?y.default.createElement(p.Alert,{style:{marginTop:"4px",marginBottom:"4px"},type:"info",message:y.default.createElement(p.Space,{size:"small",split:y.default.createElement(p.Divider,{type:"vertical"})},y.default.createElement(p.Button,{type:"text",size:"small"},"选中 ",null===(r=E.selectedRowKeys)||void 0===r?void 0:r.length," 项"),y.default.createElement(p.Button,{size:"small",onClick:function(){E.clear()},type:"link"},"取消选择"),y.default.createElement(p.Button,{size:"small",onClick:function(){E.reverse()},type:"link"},"反向选择"))}):null,y.default.createElement(O,null,y.default.createElement(m.default,o({size:"small",bordered:!0},e,{rowKey:C,expandable:T,rowSelection:e.selectable?E:void 0,components:{body:P},onChange:function(){},pagination:!1,columns:s,dataSource:l})),y.default.createElement("div",{style:{marginTop:5,marginBottom:5}},y.default.createElement(g.ObPagination,null)),c.map((function(e,t){if((0,_.isColumnComponent)(e.schema))return y.default.createElement(f.RecursionField,{name:e.name,schema:e.schema,onlyRenderSelf:!0,key:t})})),S))})),t.QueryTable.Column=function(){return y.default.createElement(y.Fragment,null)},t.QueryTable.Expand=function(){return y.default.createElement(y.Fragment,null)},t.QueryTable.Toolbar=function(e){return y.default.createElement(p.Space,o({style:{display:"flex",justifyContent:"flex-end",marginBottom:"8px"}},e),e.children)},null===(n=null==O?void 0:O.mixin)||void 0===n||n.call(O,t.QueryTable);t.QueryTable.Addition=function(e){return y.default.createElement(O.Addition,o({method:"unshift"},e))},t.QueryTable.Action=b.Action},623:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var n=r(624),o=r(625),a=r(626),i=r(627);t.Action={Popover:n.Popover,Popconfirm:o.Popconfirm,Modal:a.Modal,Drawer:i.Drawer}},624:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Popover=void 0;var a=r(7),i=o(r(0)),l=r(141),u=r(142);t.Popover=function(e){var t=(0,l.useAction)(),r=t.field,o=(0,u.usePopAction)(t,"small"),c=o.form,s=o.reset,d=o.btnProps,f=o.footer,p=o.load,m=o.loading,y=o.visible;return i.default.createElement(a.Popover,n({},e,{trigger:"click",title:e.title||r.title,content:i.default.createElement(i.default.Fragment,null,c,r.content,f),visible:y,onVisibleChange:function(t){var r;null===(r=null==e?void 0:e.onVisibleChange)||void 0===r||r.call(e,t),t||s()}}),i.default.createElement(a.Button,n({},d,e.btn,{loading:m,onClick:p}),r.title||"编辑"))}},625:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Popconfirm=void 0;var a=r(7),i=o(r(0)),l=r(141),u=r(142);t.Popconfirm=function(e){var t=(0,l.useAction)(),r=t.field,o=(0,u.usePopAction)(t,"small"),c=o.form,s=o.btnProps,d=o.load,f=o.submit,p=o.reset,m=o.loading,y=o.visible;return i.default.createElement(a.Popconfirm,n({},e,{title:i.default.createElement(i.default.Fragment,null,i.default.createElement("h4",null,e.title||r.title),c,r.content),cancelButtonProps:{loading:m},okButtonProps:{loading:m},onCancel:p,onConfirm:f,onVisibleChange:function(t){var r;t||p(),null===(r=null==e?void 0:e.onVisibleChange)||void 0===r||r.call(e,t)},visible:y}),i.default.createElement(a.Button,n({},s,null==e?void 0:e.btn,{loading:m,onClick:d}),r.title||"编辑"))}},626:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Modal=void 0;var a=r(7),i=o(r(0)),l=r(141),u=r(142);t.Modal=function(e){var t=(0,l.useAction)(),r=t.field,o=(0,u.usePopAction)(t,"middle"),c=o.form,s=o.btnProps,d=o.visible,f=o.load,p=o.reset,m=o.footer,y=o.loading;return i.default.createElement(i.default.Fragment,null,i.default.createElement(a.Modal,n({maskClosable:!1,keyboard:!1,closable:!1,width:"68.88%"},e,{afterClose:function(){var t;null===(t=null==e?void 0:e.afterClose)||void 0===t||t.call(e),p()},visible:d,title:e.title||r.title,footer:m}),c,r.content),i.default.createElement(a.Button,n({},s,null==e?void 0:e.btn,{loading:y,onClick:f}),r.title||"编辑"))}},627:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Drawer=void 0;var a=r(7),i=o(r(0)),l=r(141),u=r(142);t.Drawer=function(e){var t=(0,l.useAction)(),r=t.field,o=(0,u.usePopAction)(t,"middle"),c=o.form,s=o.load,d=o.visible,f=o.btnProps,p=o.reset,m=o.footer,y=o.loading;return i.default.createElement(i.default.Fragment,null,i.default.createElement(a.Drawer,n({maskClosable:!1,keyboard:!1,closable:!1,width:"68.88%"},e,{title:e.title||r.title,onClose:function(t){var r;p(),null===(r=null==e?void 0:e.onClose)||void 0===r||r.call(e,t)},afterVisibleChange:function(t){var r;t||p(),null===(r=null==e?void 0:e.afterVisibleChange)||void 0===r||r.call(e,t)},visible:d,footer:m}),c,r.content),i.default.createElement(a.Button,n({},f,null==e?void 0:e.btn,{loading:y,onClick:s}),r.title||"编辑"))}},628:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useTableSources=t.useTableExpandable=t.useTableColumns=t.useSortable=t.useSelection=t.useAddition=void 0;var n=r(629);Object.defineProperty(t,"useAddition",{enumerable:!0,get:function(){return n.useAddition}});var o=r(630);Object.defineProperty(t,"useSelection",{enumerable:!0,get:function(){return o.useSelection}});var a=r(631);Object.defineProperty(t,"useSortable",{enumerable:!0,get:function(){return a.useSortable}});var i=r(632);Object.defineProperty(t,"useTableColumns",{enumerable:!0,get:function(){return i.useTableColumns}});var l=r(633);Object.defineProperty(t,"useTableExpandable",{enumerable:!0,get:function(){return l.useTableExpandable}});var u=r(634);Object.defineProperty(t,"useTableSources",{enumerable:!0,get:function(){return u.useTableSources}})},629:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useAddition=void 0;var o=r(5),a=n(r(0)),i=r(97);t.useAddition=function(){return(0,o.useFieldSchema)().reduceProperties((function(e,t,r){return(0,i.isAdditionComponent)(t)?a.default.createElement(o.RecursionField,{schema:t,name:r}):e}),null)}},630:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.useSelection=void 0;var o=r(5),a=r(1),i=r(0);t.useSelection=function(e,t){var r=(0,o.useField)(),l=(0,i.useMemo)((function(){return e||function(e){return r.value.indexOf(e)}}),[r.value,e]),u=(0,i.useRef)(l);(0,i.useEffect)((function(){u.current=l}),[l]);var c=(0,i.useMemo)((function(){var e=(0,a.observable)(n({type:"checkbox",selectedRows:[],selectedRowKeys:[],clear:function(){e.selectedRowKeys=[],e.selectedRows=[]},reverse:function(){var t=r.value.filter((function(t){return!e.selectedRows.find((function(e){return e===t}))})),n=t.map((function(e){return"function"==typeof u.current?u.current(e):e[u.current]}));e.selectedRowKeys=n,e.selectedRows=t},onChange:function(t,r){e.selectedRowKeys=t,e.selectedRows=r}},t));return e}),[r,t]);return[l,c]}},631:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.useSortable=void 0;var l=i(r(0)),u=r(5),c=r(78),s=r(97),d=r(230),f=(0,c.SortableElement)((function(e){return l.default.createElement("tr",n({},e))})),p=(0,c.SortableContainer)((function(e){return l.default.createElement("tbody",n({},e))})),m=function(e){return l.default.createElement(f,n({index:e["data-row-key"]||0},e))};t.useSortable=function(e){var t=(0,d.usePrefixCls)("formily-array-table"),r=(0,u.useField)(),o=(0,u.useFieldSchema)(),a=(0,l.useMemo)((function(){return(0,s.hasSortable)(o)}),[o]),i=(0,l.useCallback)((function(o){return l.default.createElement(p,n({useDragHandle:!0,lockAxis:"y",helperClass:"".concat(t,"-sort-helper"),helperContainer:function(){var t;return null===(t=e.current)||void 0===t?void 0:t.querySelector("tbody")},onSortStart:function(e){!function(e,t){var r=document.body.querySelector(".".concat(t,"-sort-helper"));if(r){var n=e.querySelectorAll("td");requestAnimationFrame((function(){r.querySelectorAll("td").forEach((function(e,t){n[t]&&(e.style.width=getComputedStyle(n[t]).width)}))}))}}(e.node,t)},onSortEnd:function(e){var t=e.oldIndex,n=e.newIndex;r.move(t,n)}},o))}),[r,e,t]);return{wrapper:a?i:void 0,row:a?m:void 0}}},632:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useTableColumns=void 0;var a=r(15),i=r(5),l=r(7),u=o(r(0)),c=r(97),s=a.ArrayBase;t.useTableColumns=function(e,t){return t.reduce((function(t,r,o){var a=r.name,d=r.columnProps,f=r.schema;return"visible"!==r.display?t:(0,c.isColumnComponent)(f)||(0,c.isActionsColumnComponent)(f)?t.concat(n(n({},d),{key:o,dataIndex:a,render:function(t,r){var n,o=null===(n=null==e?void 0:e.value)||void 0===n?void 0:n.indexOf(r);return function(e,t,r,n){var o=Object.keys(t.properties||{}).length,a=e.maxItems||2,c=o>=a?u.default.createElement(l.Menu,{mode:"vertical",items:t.mapProperties((function(e,t,n){return n<a?null:{key:n,label:u.default.createElement(i.RecursionField,{schema:e,name:"".concat(r,".").concat(t)})}})).filter(Boolean)}):void 0;return"actions"===e.type?u.default.createElement(s.Item,{index:r,record:function(){var e;return null===(e=null==n?void 0:n.value)||void 0===e?void 0:e[r]}},u.default.createElement(l.Space,{size:"small",split:u.default.createElement(l.Divider,{type:"vertical"})},t.mapProperties((function(e,t,n){return n>=a?null:u.default.createElement(i.RecursionField,{key:"".concat(r,".").concat(t),schema:e,name:"".concat(r,".").concat(t)})})),o>=a?u.default.createElement(l.Dropdown,{overlay:c},u.default.createElement(l.Button,{size:"small",type:"link"},"...")):null)):u.default.createElement(s.Item,{index:r,record:function(){var e;return null===(e=null==n?void 0:n.value)||void 0===e?void 0:e[r]}},u.default.createElement(i.RecursionField,{schema:t,name:r,onlyRenderProperties:!0}))}(d,f,o,e)}})):t}),[])}},633:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useTableExpandable=t.findExpandComponent=void 0;var a=r(15),i=r(5),l=o(r(0)),u=r(97),c=a.ArrayBase;t.findExpandComponent=function(e){if((0,u.isExpandComponent)(e))return e;var r;if(e.properties&&(r=e.reduceProperties((function(e,r){return e||(0,t.findExpandComponent)(r)}))))return r;if(e.items&&(r=e.items.reduceProperties((function(e,r){return e||(0,t.findExpandComponent)(r)}))))return r};t.useTableExpandable=function(e){var r=(0,i.useField)(),o=(0,i.useFieldSchema)(),a=(0,t.findExpandComponent)(o),u=n({expandedRowRender:function(e,t,n,o){return a?l.default.createElement(c.Item,{index:t,record:function(){var e;return null===(e=null==r?void 0:r.value)||void 0===e?void 0:e[t]}},l.default.createElement(i.RecursionField,{schema:a,name:t,onlyRenderProperties:!0})):null}},e);return a?u:void 0}},634:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useTableSources=void 0;var n=r(5),o=r(2),a=r(97);t.useTableSources=function(){var e=(0,n.useField)(),t=(0,n.useFieldSchema)(),r=function(t){var n,o,i;if((0,a.isColumnComponent)(t)||(0,a.isOperationsComponent)(t)||(0,a.isAdditionComponent)(t)){if(!(null===(n=t["x-component-props"])||void 0===n?void 0:n.dataIndex)&&!t.name)return[];var l=(null===(o=t["x-component-props"])||void 0===o?void 0:o.dataIndex)||t.name,u=e.query(e.address.concat(l)).take(),c=(null===(i=null==u?void 0:u.component)||void 0===i?void 0:i[1])||t["x-component-props"]||{};return[{name:l,display:(null==u?void 0:u.display)||t["x-display"],field:u,schema:t,columnProps:c}]}return t.properties?t.reduceProperties((function(e,t){return e.concat(r(t))}),[]):[]};if(!t)throw new Error("can not found schema object");return function(e,t){if(!e)return[];return((0,o.isArr)(e)?e:[e]).reduce((function(e,r){var n=t(r);return n?e.concat(n):e}),[])}(t.items,r)}},635:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ObPagination=void 0;var l=r(5),u=r(7),c=i(r(0)),s=r(112);t.ObPagination=(0,l.observer)((function(e){var t=(0,l.useField)(),r=null==t?void 0:t.data,o=(0,s.useQueryListContext)(),a=o.refresh,i=o.startIndex,d=void 0===i?1:i,f=o.pageSize,p=void 0===f?10:f,m=(null==r?void 0:r.total)||0,y=(null==r?void 0:r.current)||d,v=(0,c.useMemo)((function(){return void 0!==(null==r?void 0:r.pageSize)?r.pageSize:p}),[null==r?void 0:r.pageSize,p]),b=Math.ceil(m/v);(0,c.useEffect)((function(){t.setState((function(e){e.data=e.data||{},e.data.current=e.data.current||d,e.data.pageSize=v,e.data.total&&a()}))}),[t,v,d,a]),(0,c.useEffect)((function(){(null==r?void 0:r.current)&&b<r.current&&t.setState((function(e){e.data=e.data||{},e.data.current=b}))}),[r,t,b]);var h=(0,c.useCallback)((function(e,r){t.setState((function(t){t.data=t.data||{},t.data.current=e,t.data.pageSize=r,t.data.total&&a()}))}),[t,a]);return b<=1?null:c.default.createElement("div",{style:{display:"flex",justifyContent:"flex-end",alignItems:"center"}},c.default.createElement("div",{style:{marginRight:"8px"}},"第 ",(y-d)*v+1,"-",Math.min((y-d+1)*v,m)," 条, 总共"," ",m," 条"),c.default.createElement("div",null,c.default.createElement(u.Pagination,n({},e,{pageSize:v,current:r.current||1,showQuickJumper:!0,size:"small",total:m,showSizeChanger:!0,onShowSizeChange:h,onChange:h}))))}))},636:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SchemaEditorWidget=void 0;var a=o(r(0)),i=r(177),l=r(49);t.SchemaEditorWidget=function(e){console.log("----");var t=JSON.stringify((0,i.transformToSchema)(e.tree),null,2);return console.log("neo",t),a.default.createElement(l.MonacoInput,n({},e,{value:t,onChange:function(t){var r;null===(r=e.onChange)||void 0===r||r.call(e,(0,i.transformToTreeNode)(JSON.parse(t)))},language:"json"}))}},637:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MarkupSchemaWidget=void 0;var a=o(r(0)),i=r(49),l=r(2);t.MarkupSchemaWidget=function(e){return a.default.createElement(i.MonacoInput,n({},e,{options:{readOnly:!0},value:(t=e.tree,r=function(e){if(!e)return"";var t=n({},e.props);return 0!==e.depth&&(t.name=e.props.name||e.id),"".concat(Object.keys(t).map((function(e){if("x-designable-id"===e||"x-designable-source-name"===e||"_isJSONSchemaObject"===e||"version"===e||"type"===e)return"";var r=t[e];return(0,l.isPlainObj)(r)&&(0,l.isEmpty)(r)?"":"string"==typeof r?"".concat(e,'="').concat(r,'"'):"".concat(e,"={").concat(JSON.stringify(r),"}")})).join(" "))},o=function(e){return e?e.children.map((function(e){return c(e)})).join(""):""},u=function(e){return"string"===e.props.type?"SchemaField.String":"number"===e.props.type?"SchemaField.Number":"boolean"===e.props.type?"SchemaField.Boolean":"date"===e.props.type?"SchemaField.Date":"datetime"===e.props.type?"SchemaField.DateTime":"array"===e.props.type?"SchemaField.Array":"object"===e.props.type?"SchemaField.Object":"void"===e.props.type?"SchemaField.Void":"SchemaField.Markup"},c=function(e){return e?"<".concat(u(e)," ").concat(r(e)," ").concat(e.children.length?">".concat(o(e),"</").concat(u(e),">"):"/>"):""},s=t.find((function(e){return"Form"===e.componentName||"Root"===e.componentName})),"import React, { useMemo } from 'react'\nimport { createForm } from '@formily/core'\nimport { createSchemaField } from '@formily/react'\nimport {\n  Form,\n  FormItem,\n  DatePicker,\n  Checkbox,\n  Cascader,\n  Editable,\n  Input,\n  NumberPicker,\n  Switch,\n  Password,\n  PreviewText,\n  Radio,\n  Reset,\n  Select,\n  Space,\n  Submit,\n  TimePicker,\n  Transfer,\n  TreeSelect,\n  Upload,\n  FormGrid,\n  FormLayout,\n  FormTab,\n  FormCollapse,\n  ArrayTable,\n  ArrayCards,\n} from '@formily/antd'\nimport { Card, Slider, Rate } from 'antd'\nimport { QueryForm, QueryList, QueryTable } from '../components/QueryList'\n\nconst Text: React.FC<{\n  value?: string\n  content?: string\n  mode?: 'normal' | 'h1' | 'h2' | 'h3' | 'p'\n}> = ({ value, mode, content, ...props }) => {\n  const tagName = mode === 'normal' || !mode ? 'div' : mode\n  return React.createElement(tagName, props, value || content)\n}\n\nconst SchemaField = createSchemaField({\n  components: {\n    QueryForm, QueryList, QueryTable,\n    Space,\n    FormGrid,\n    FormLayout,\n    FormTab,\n    FormCollapse,\n    ArrayTable,\n    ArrayCards,\n    FormItem,\n    DatePicker,\n    Checkbox,\n    Cascader,\n    Editable,\n    Input,\n    Text,\n    NumberPicker,\n    Switch,\n    Password,\n    PreviewText,\n    Radio,\n    Reset,\n    Select,\n    Submit,\n    TimePicker,\n    Transfer,\n    TreeSelect,\n    Upload,\n    Card,\n    Slider,\n    Rate,\n  },\n})\n\nexport default ()=>{\n  const form = useMemo(() => createForm(), [])\n\n  return <Form form={form} ".concat(r(s),">\n    <SchemaField>\n      ").concat(o(s),"\n    </SchemaField>\n  </Form>\n}\n\n")),language:"typescript"}));var t,r,o,u,c,s}},638:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QueryTable=t.QueryForm=t.QueryList=void 0;var n=r(639);Object.defineProperty(t,"QueryList",{enumerable:!0,get:function(){return n.QueryList}});var o=r(640);Object.defineProperty(t,"QueryForm",{enumerable:!0,get:function(){return o.QueryForm}});var a=r(641);Object.defineProperty(t,"QueryTable",{enumerable:!0,get:function(){return a.QueryTable}})},639:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryList=void 0;var o=r(6),a=r(5),i=n(r(0)),l=r(98),u=r(115);t.QueryList=(0,a.observer)((function(e){return i.default.createElement(i.default.Fragment,null,e.children)})),t.QueryList.Behavior=(0,o.createBehavior)({name:"QueryList",extends:["Field"],selector:function(e){return["QueryList"].indexOf(e.props["x-component"])>-1},designerProps:{droppable:!0,propsSchema:(0,l.createVoidFieldSchema)()},designerLocales:(0,u.getLocales)("QueryList")}),t.QueryList.Resource=(0,o.createResource)({title:"QueryList",icon:"ArrayTableSource",elements:[{componentName:"Field",props:{type:"void","x-component":"QueryList","x-component-props":{service:"{{service}}"}},children:[{componentName:"Field",props:{type:"object","x-component":"QueryForm","x-component-props":{grid:{maxRows:2,maxColumns:3}}},children:[{componentName:"Field",props:{type:"string",title:"输入框","x-decorator":"FormItem","x-component":"Input"}}]},{componentName:"Field",props:{title:"工具栏",type:"object","x-component":"QueryTable.Toolbar"},children:(0,u.actions)()},{componentName:"Field",props:{type:"array","x-component":"QueryTable"},children:[{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{width:80,title:"Index",align:"center"}},children:[{componentName:"Field",props:{type:"void","x-component":"QueryTable.Index"}}]},{componentName:"Field",props:{type:"void","x-component":"QueryTable.Column","x-component-props":{width:80,title:"Index",align:"center"}},children:(0,u.actions)()}]}]}]})},640:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryForm=void 0;var a=r(6),i=r(11),l=r(5),u=r(15),c=o(r(0)),s=r(98),d=r(115),f=r(7),p=r(194);t.QueryForm=(0,l.observer)((function(e){return c.default.createElement(i.DroppableWidget,null,c.default.createElement(c.default.Fragment,null,c.default.createElement(u.FormLayout,n({},e.layout),c.default.createElement(u.FormGrid,n({},e.grid),e.children)),c.default.createElement(f.Space,{style:{display:"flex",justifyContent:"flex-end"}},c.default.createElement(f.Button,null,"重置"),c.default.createElement(f.Button,{type:"primary"},"查询")),c.default.createElement(p.LoadTemplate,{actions:[{title:"↑ 查询表单",onClick:function(){}}]})))})),t.QueryForm.Behavior=(0,a.createBehavior)({name:"QueryForm",extends:["Field"],selector:function(e){return"QueryForm"===e.props["x-component"]},designerProps:{droppable:!0,propsSchema:(0,s.createFieldSchema)()},designerLocales:(0,d.getLocales)("QueryForm")}),t.QueryForm.Resource=(0,a.createResource)({title:"QueryForm",icon:"CardSource",elements:[{componentName:"Field",props:{type:"object","x-component":"QueryForm","x-component-props":{grid:{maxRows:2,maxColumns:3}}}}]})},641:function(e,t,r){"use strict";var n,o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueryTable=void 0;var c=r(6),s=r(642),d=r(282),f=r(15),p=u(r(3)),m=r(644),y=r(645),v=r(11),b=r(5),h=l(r(0)),g=r(98),_=r(194),O=r(7),P=r(115),S=function(e){var t;return h.default.createElement("th",o({},e,{"data-designer-node-id":null===(t=e.className.match(/data-id\:([^\s]+)/))||void 0===t?void 0:t[1]}),e.children)},x=function(e){var t;return h.default.createElement("td",o({},e,{"data-designer-node-id":null===(t=e.className.match(/data-id\:([^\s]+)/))||void 0===t?void 0:t[1]}),e.children)},C=(0,d.createEnsureTypeItemsNode)("object");t.QueryTable=(0,b.observer)((function(e){var t=(0,v.useTreeNode)();(0,s.useDropTemplate)("QueryTable.Column",(function(e){return e.map((function(e){return e.props.title=void 0,e}))}));var r=(0,d.queryNodesByComponentPath)(t,["QueryTable","*","QueryTable.Column"]);console.log("columns",r);return h.default.createElement(h.default.Fragment,null,0===t.children.length?h.default.createElement(v.DroppableWidget,null):h.default.createElement(f.ArrayBase,{disabled:!0},h.default.createElement(O.Table,o({size:"small",bordered:!0},e,{scroll:{x:"100%"},className:(0,p.default)("ant-formily-array-table",e.className),style:o({marginBottom:10},e.style),rowKey:function(){return t.id},dataSource:[{id:"1"}],pagination:!1,components:{header:{cell:S},body:{cell:x}}}),r.map((function(e){var t=e.children.map((function(e){return h.default.createElement(v.TreeNodeWidget,{node:e,key:e.id})})),r=e.props["x-component-props"];return h.default.createElement(O.Table.Column,o({},r,{title:h.default.createElement("div",{"data-content-editable":"x-component-props.title"},r.title),dataIndex:e.id,className:"data-id:".concat(e.id),key:e.id,render:function(e,r,n){return h.default.createElement(f.ArrayBase.Item,{key:n,index:n,record:null},t.length>0?t:"Droppable")}}))})),0===r.length&&h.default.createElement(O.Table.Column,{render:function(){return h.default.createElement(v.DroppableWidget,null)}}))),h.default.createElement(_.LoadTemplate,{actions:[{title:"↑ 查询列表 →",onClick:function(){}},{title:"添加索引",icon:"AddIndex",onClick:function(){var e=new c.TreeNode((0,P.getIndexNode)());C(t).prepend(e)}},{title:"添加列",icon:"AddColumn",onClick:function(){var e=new c.TreeNode((0,P.getColumnNode)());C(t).append(e)}},{title:"添加动作",icon:"AddOperation",onClick:function(){var e=new c.TreeNode((0,P.getActionsNode)());C(t).append(e)}}]}))})),null===(n=null===f.ArrayBase||void 0===f.ArrayBase?void 0:f.ArrayBase.mixin)||void 0===n||n.call(f.ArrayBase,t.QueryTable),t.QueryTable.Column=function(){return h.default.createElement(h.Fragment,null)},t.QueryTable.Toolbar=y.Toolbar,t.QueryTable.Expand=function(){return h.default.createElement(h.Fragment,null)},t.QueryTable.Action={Drawer:m.Drawer,Popover:m.Drawer,Modal:m.Drawer,Popconfirm:m.Drawer},t.QueryTable.Behavior=(0,c.createBehavior)({name:"QueryTable",extends:["Field"],selector:function(e){return"QueryTable"===e.props["x-component"]},designerProps:{droppable:!0,propsSchema:(0,g.createFieldSchema)(g.AllSchemas.ArrayTable)},designerLocales:g.AllLocales.ArrayTable},{name:"QueryTable.Column",extends:["Field"],selector:function(e){return"QueryTable.Column"===e.props["x-component"]},designerProps:{droppable:!0,propsSchema:(0,g.createVoidFieldSchema)(g.AllSchemas.ArrayTable.Column)},designerLocales:g.AllLocales.ArrayTableColumn}),t.QueryTable.Resource=(0,c.createResource)({title:"QueryTable",icon:"ArrayTableSource",elements:[{componentName:"Field",props:{type:"array","x-component":"QueryTable"}}]})},644:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Drawer=void 0;var u=r(6),c=r(11),s=r(5),d=r(7),f=a(r(0)),p=r(98),m=l(r(264)),y=r(115),v=function(){var e,t;return"".concat((null===(t=null===(e=document.querySelector(".dn-settings-panel"))||void 0===e?void 0:e.getBoundingClientRect())||void 0===t?void 0:t.width)||"320","px")},b=function(){var e,t;return"".concat((null===(t=null===(e=document.querySelector(".dn-composite-panel"))||void 0===e?void 0:e.getBoundingClientRect())||void 0===t?void 0:t.width)||"320","px")};t.Drawer=(0,s.observer)((function(e){var t=(0,c.useTreeNode)(),r=i((0,f.useState)(!1),2),n=r[0],o=r[1],a=(0,f.useRef)();return console.log("---props",{props:e,node:t}),f.default.createElement(f.default.Fragment,null,f.default.createElement(d.Button,{onClick:function(){o(!0)}},t.props.title||"打开 Drawer"),f.default.createElement("div",{ref:a},f.default.createElement(d.Drawer,{zIndex:1,getContainer:function(){return document.querySelector(".dn-component-tree")||a.current},closable:!1,maskStyle:{left:b()},style:{right:v()},maskClosable:!0,visible:n,afterVisibleChange:o,title:f.default.createElement(d.Space,null,f.default.createElement(d.Button,{type:"link",onClick:function(){return o(!1)}},"关闭"),f.default.createElement(d.Button,{type:"text"},t.props.title||"表单内容")),footer:f.default.createElement(m.default,null,f.default.createElement(d.Button,{onClick:function(){return o(!1)}},"关闭"))},f.default.createElement(c.DroppableWidget,null,e.children))))})),t.Drawer.Behavior=(0,u.createBehavior)({name:"QueryTable.Action.Drawer",extends:["Field"],selector:function(e){return"QueryTable.Action.Drawer"===e.props["x-component"]},designerProps:{droppable:!0,propsSchema:(0,p.createFieldSchema)()},designerLocales:(0,y.getLocales)("QueryTable.Action.Drawer")}),t.Drawer.Resource=(0,u.createResource)({title:"Drawer",icon:"CardSource",elements:[{componentName:"Field",props:{type:"object","x-component":"QueryTable.Action.Drawer"},children:[{componentName:"Field",props:{type:"void","x-component":"Space"}}]}]})},645:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Toolbar=void 0;var o=r(6),a=r(11),i=n(r(0)),l=r(15),u=r(98),c=r(646),s=r(194),d=r(115);t.Toolbar=(0,c.withContainer)((function(e){var t=(0,a.useTreeNode)();return i.default.createElement(i.default.Fragment,null,i.default.createElement(l.Space,{style:{width:"100%",display:"flex",justifyContent:"flex-end"}},e.children),i.default.createElement(s.LoadTemplate,{actions:[{title:"↑ 工具栏 →",onClick:function(){}},{title:"添加Drawer",icon:"AddIndex",onClick:function(){var e=new o.TreeNode((0,d.actions)("Drawer")[0]);t.prepend(e)}}]}))})),t.Toolbar.Behavior=(0,o.createBehavior)({name:"QueryTable.Toolbar",extends:["Field"],selector:function(e){return"QueryTable.Toolbar"===e.props["x-component"]},designerProps:{droppable:!0,inlineChildrenLayout:!0,propsSchema:(0,u.createVoidFieldSchema)(u.AllSchemas.Space)},designerLocales:u.AllLocales.Space}),t.Toolbar.Resource=(0,o.createResource)({title:"Toolbar",icon:"SpaceSource",elements:[{componentName:"Field",props:{type:"void","x-component":"QueryTable.Toolbar"}}]})},7:function(e,t){e.exports=antd},97:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isAdditionComponent=t.isOperationsComponent=t.isExpandComponent=t.isActionsColumnComponent=t.hasSortable=t.isColumnComponent=void 0;t.isColumnComponent=function(e){var t;return(null===(t=e["x-component"])||void 0===t?void 0:t.indexOf("Column"))>-1};t.hasSortable=function(e){return(e.items||e).reduceProperties((function(e,r){var n;return e||((null===(n=r["x-component"])||void 0===n?void 0:n.indexOf("SortHandle"))>-1?r:r.properties||r.items?(0,t.hasSortable)(r):e)}))};t.isActionsColumnComponent=function(e){var t;return(null===(t=e["x-component"])||void 0===t?void 0:t.indexOf("Actions"))>-1};t.isExpandComponent=function(e){var t,r;return(null===(t=e["x-component"])||void 0===t?void 0:t.indexOf("Expand"))>-1||(null===(r=e["x-decorator"])||void 0===r?void 0:r.indexOf("Expand"))>-1};t.isOperationsComponent=function(e){var t;return(null===(t=e["x-component"])||void 0===t?void 0:t.indexOf("Operations"))>-1};t.isAdditionComponent=function(e){var t;return(null===(t=e["x-component"])||void 0===t?void 0:t.indexOf("Addition"))>-1}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,